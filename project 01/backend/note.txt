=============================
How to run this project:

    uvicorn main:app --reload
=========================
Annotated
The FastAPI documentation recommends the use of Annotated for 
defining route dependencies and parameters, rather than using 
Depends directly with a default value.
This approach is also suggested for various route parameters,
including Body and Cookie, as it helps ensure consistency and clarity in defining dependencies and parameters.


Example
    from fastapi import Depends, FastAPI
    app = FastAPI()
    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
    @app.get("/items/")
    async def read_items(commons: dict = Depends(common_parameters)):
    return commons

Use instead:
    from typing import Annotated
    from fastapi import Depends, FastAPI
    app = FastAPI()
    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
    @app.get("/items/")
    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

=========================
inside posgresql create a table with below code :

DROP TABLE IF EXISTS todos;
DROP TABLE IF EXISTS users;

CREATE TABLE users (
  id SERIAL,
  email varchar(200) DEFAULT NULL,
  username varchar(45) DEFAULT NULL,
  firstname varchar(45) DEFAULT NULL,
  llastname varchar(45) DEFAULT NULL,
  hash_password varchar(200) DEFAULT NULL,
  is_active boolean DEFAULT NULL,
  role varchar(45) DEFAULT NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS todos;

CREATE TABLE todos (
  id SERIAL,
  title varchar(200) DEFAULT NULL,
  description varchar(200) DEFAULT NULL,
  priority integer  DEFAULT NULL,
  complete boolean  DEFAULT NULL,
  owner_id integer  DEFAULT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (owner_id) REFERENCES users(id)
);

=========================
Your link to connect postgresql should be like this:

SQLALCHEMY_DATABASE_URL = "postgresql://<username in postgress datbase>:<password in postgress databse >@<domain name>/<your databse name that you created in postgres>"
SQLALCHEMY_DATABASE_URL = "postgresql://user:password@127.0.0.1/Todo"
=========================
How to use ALEMBIC:
1) Install it
$ pip install alembic 

2) initialize it:
$ alembic init <folder that you want revisions to be saved> 
$ alembic init migrations


3) Define proect to Alempic
===>) inside alembic.ini change the datab of "sqlalchemy.url " to database that you are working with:

===>) if you use sqlite would be sth like this:
sqlalchemy.url  = "sqlite:///./database.db"

===>) if you use postgresql would be sth like this:
sqlalchemy.url = "postgresql://user:password@postgresserver/db"

4) Also we should be sure Alembic can find our models, therefore we should use "Base":
inside env.py change the value of "target_metadata"

$ from model import Base
$ target_metadata= Base.metadata

5) because we want to use migrations we dont need below line in our main.py, so we remove it:

remove below line in main.py:
$ models.Base.metadata.create_all(engine)


5) then we should do our migrations in terminal:

$ alembic revision --autogenerate -m "<your message>"

6) still oour database is not get informed about any changes in our models,
we should do below line:

$ alembic upgrade head

7) to revert to last migration:
$ alembic downgrade -l
=========================
