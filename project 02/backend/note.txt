=============================
How to run this project:

  1)   uvicorn main:app --reload

  2nd approch is:

  2) fastapi dev
=========================
Annotated
The FastAPI documentation recommends the use of Annotated for 
defining route dependencies and parameters, rather than using 
Depends directly with a default value.
This approach is also suggested for various route parameters,
including Body and Cookie, as it helps ensure consistency and clarity in defining dependencies and parameters.


Example
    from fastapi import Depends, FastAPI
    app = FastAPI()
    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
    @app.get("/items/")
    async def read_items(commons: dict = Depends(common_parameters)):
    return commons

Use instead:
    from typing import Annotated
    from fastapi import Depends, FastAPI
    app = FastAPI()
    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
    @app.get("/items/")
    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

=========================
inside posgresql create a table with below code :

DROP TABLE IF EXISTS todos;
DROP TABLE IF EXISTS users;

CREATE TABLE users (
  id SERIAL,
  email varchar(200) DEFAULT NULL,
  username varchar(45) DEFAULT NULL,
  firstname varchar(45) DEFAULT NULL,
  llastname varchar(45) DEFAULT NULL,
  hash_password varchar(200) DEFAULT NULL,
  is_active boolean DEFAULT NULL,
  role varchar(45) DEFAULT NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS todos;

CREATE TABLE todos (
  id SERIAL,
  title varchar(200) DEFAULT NULL,
  description varchar(200) DEFAULT NULL,
  priority integer  DEFAULT NULL,
  complete boolean  DEFAULT NULL,
  owner_id integer  DEFAULT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (owner_id) REFERENCES users(id)
);

=========================
Your link to connect postgresql should be like this:

SQLALCHEMY_DATABASE_URL = "postgresql://<username in postgress datbase>:<password in postgress databse >@<domain name>/<your databse name that you created in postgres>"
SQLALCHEMY_DATABASE_URL = "postgresql://user:password@127.0.0.1/Todo"
=========================
How to use ALEMBIC:
1) Install it
$ pip install alembic 

2) initialize it:
$ alembic init <folder that you want revisions to be saved> 
$ alembic init migrations


3) Define proect to Alempic
===>) inside alembic.ini change the datab of "sqlalchemy.url " to database that you are working with:

===>) if you use sqlite would be sth like this:
sqlalchemy.url  = "sqlite:///./database.db"

===>) if you use postgresql would be sth like this:
sqlalchemy.url = "postgresql://user:password@postgresserver/db"

4) Also we should be sure Alembic can find our models, therefore we should use "Base":
inside env.py change the value of "target_metadata"

$ from model import Base
$ target_metadata= Base.metadata

5) because we want to use migrations we dont need below line in our main.py, so we remove it:

remove below line in main.py:
$ models.Base.metadata.create_all(engine)


5) then we should do our migrations in terminal:

$ alembic revision --autogenerate -m "<your message>"

6) still oour database is not get informed about any changes in our models,
we should do below line:

$ alembic upgrade head

7) to revert to last migration:
$ alembic downgrade -l
=========================
Difference between SWAGGER & SCALAR

The Problem with Default Swagger Docs
Swagger is great for getting started, but:

It's plain and developer playground-like
It doesn't scale visually when you have 50+ endpoints
It lacks branding â€” it doesn't feel like your product
First impressions matter â€” messy docs = perceived messy product
Image description

ðŸš€ Meet scalar-fastapi
scalar-fastapi is a sweet package that upgrades your FastAPI 
documentation experience instantly.

It turns your OpenAPI schema into a:

Beautifully designed API reference
Modern, responsive UI
Developer-first experience
And the best part?

It takes just a few lines of code to integrate.

How to use scalar?

    from scalar_fastapi import get_scalar_api_reference
    app = FastAPI(title=settings.PROJECT_NAME)

    @app.get("/scalar", include_in_schema=False)
    async def scalar_html():
        return get_scalar_api_reference(
            openapi_url=app.openapi_url,
            title=app.title,
        )
=========================
how to orginie your imports in VScode:
press  =>  shift +  alt  +  o
=========================

======> session.get()
 Retrieves a single ORM object by its primary key in a simple, direct way.
Use session.get() when you need to fetch a single record by its
primary key (e.g., id).
Single Result: Returns one object or None; no need to call .scalar() or similar.

======> session.execute()
Executes a SQL query (typically a select statement) and returns a result set, 
allowing for flexible and complex queries.

Use session.execute() when you need to query based on non-primary 
key fields (e.g., email, name) or complex conditions.
Suitable for queries involving filters, joins, ordering, grouping, 
or multiple results.
Flexible Queries: Supports select statements with .where(), .join(), .order_by(), etc.
Result Handling: Returns a Result object, requiring methods like 
.scalar(), .scalar_one_or_none(), or .scalars().all() to process results.

=========================
how to connect to redis via windows:

frist in WSL install redis:
  sudo apy-get install redis-server

then intialize your redis server:
  sudo service redis-server restart

after that in your project in windows install redis:
  pip install redis[hiredis]

then in shell you can test that you are connected to redis or not:
  (venv) PS E:\Imparare\backend> python     
  Python 3.13.2 (tags/v3.13.2:4f8bb39, Feb  4 2025, 15:23:48) [MSC v.1942 64 bit (AMD64)] on win32
  Type "help", "copyright", "credits" or "license" for more information.
  >>> from redis import Redis
  >>> con = Redis(host='localhost', port=6379, db=0)
  >>> con.ping()
  True

  >>> con.set('key','value')
  True
  >>> con.get('key')
  b'value'
  >>> 
  
  >>> con.exists('key')
  1